/*
	üìå Generator Functions
	    üìå Son funciones que pueden ser pausadas y reanudadas (yield)
        Los generadores tienen los siguientes 2 m√©todos clave.

        Yield method (M√©todo de rendimiento) ‚Äì El m√©todo de rendimiento se llama en una funci√≥n para 
        detener la ejecuci√≥n de la funci√≥n en la l√≠nea espec√≠fica donde se llama el m√©todo de 
        rendimiento.
        Next method (Siguiente m√©todo) ‚Äì Este m√©todo se llama desde la aplicaci√≥n principal para 
        reanudar la ejecuci√≥n de una funci√≥n que tiene un m√©todo de rendimiento. 
        La ejecuci√≥n de la funci√≥n continuar√° hasta el pr√≥ximo m√©todo de rendimiento o hasta el final 
        del m√©todo.
*/

function* Add(x) {
    yield x + 1;
    var y = yield null;
    y = 6;
    return x + y;
}

var gen = Add(5);

gen.next();

gen.next();

/*

1-El primer paso es definir nuestra ‚Äúfunci√≥n‚Äù generadora. Tenga en cuenta que esto 
se hace agregando un "*" a la palabra clave de funci√≥n. Entonces estamos definiendo 
una funci√≥n llamada Add que toma un par√°metro de x.
2-La palabra clave yield es espec√≠fica de los generadores. Esto lo convierte en una 
construcci√≥n poderosa para pausar una funci√≥n en medio de cualquier cosa. As√≠ que 
aqu√≠, la ejecuci√≥n de la funci√≥n se detendr√° hasta que invoquemos la funci√≥n next(),
que se realizar√° en el Paso 4. En este punto, el valor de x ser√° 6 y se detendr√° 
la ejecuci√≥n de la funci√≥n.
3-Aqu√≠ es donde primero llamamos a la funci√≥n generadora y enviamos el valor de 5 
a nuestra funci√≥n Agregar. Este valor se sustituir√° en el 
par√°metro x de nuestra funci√≥n Add. 
4-Una vez que llamamos a la funci√≥n next(), la funci√≥n Add() reanudar√° la ejecuci√≥n. Cuando se ejecute la siguiente 
instrucci√≥n var y= yield(null), la funci√≥n Add() volver√° a dejar de ejecutarse.
5-Ahora, despu√©s de volver a llamar a la funci√≥n next(), se ejecutar√°n las 
siguientes declaraciones y se agregar√° y devolver√° el valor combinado de x=5 e y=6.*/
